{"version":3,"sources":["components/Input.js","components/Message.js","services/netDB.js","components/Persons.js","App.js","serviceWorker.js","index.js"],"names":["Input","label","value","onChange","event","target","Message","message","setMessage","text","length","setTimeout","error","className","url","object","axios","post","get","id","delete","PersonItem","person","onClick","name","number","PersonList","persons","map","key","Persons","App","useState","filter","setFilter","setName","setNumber","setPersons","useEffect","netDB","then","response","data","shownPersons","toLowerCase","includes","onSubmit","preventDefault","found","find","alert","forEach","set","window","confirm","concat","type","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.a37cf8f8.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Input = ({label, value, onChange}) => {\n\t/*\n\t * You can nest the <input> directly inside the <label>, in which case\n\t * the for and id attributes are not needed because the association is\n\t * implicit.\n\t */\n\treturn (<label>{label}<input value={value} onChange={(event) =>\n\t\tonChange(event.target.value)}/></label>);\n}\n\nexport default Input;\n","import React from \"react\";\n\nconst Message = ({message, setMessage}) => {\n\tif (!message.text.length) {\n\t\treturn (null);\n\t}\n\tsetTimeout(() => {setMessage({text: \"\", error: false})}, 5000);\n\treturn (<div className={message.error ? \"error\" : \"message\"}>\n\t\t{message.text}</div>);\n}\n\nexport default Message;\n","import axios from \"axios\";\n\nconst url = \"/api/persons\";\n\nconst create = (object) => {\n\t/*\n\t * Create a member resource in the collection resource using the\n\t * instructions in the request body. The URI of the created member\n\t * resource is automatically assigned and returned in the response\n\t * Location header field.\n\t */\n\treturn (axios.post(url, object));\n}\n\nconst reload = () => {\n\t/*\n\t * Retrieve the URIs of the member resources of the collection\n\t * resource in the response body.\n\t */\n\treturn (axios.get(url));\n}\n\nconst remove = (id) => {\n\t/* Delete all the representations of the member resource. */\n\treturn (axios.delete(`${url}/${id}`));\n}\n\nconst update = (id, object) => {\n\t/*\n\t * Replace all the representations of the member resource or create\n\t * the member resource if it does not exist, with the representation\n\t * in the request body.\n\t */\n\treturn (axios.put(`${url}/${id}`, object));\n}\n\nexport default {create, reload, remove, update};\n","import React from \"react\";\n\nconst PersonItem = ({person, onClick}) => {\n\treturn (<li>{person.name} {person.number}<button onClick={() =>\n\t\tonClick(person.id)}>Delete</button></li>);\n}\n\nconst PersonList = ({persons, onClick}) => {\n\treturn (persons.map(person =>\n\t\t<PersonItem key={person.name}\n\t\t\tperson={person} onClick={onClick}/>));\n}\n\nconst Persons = ({persons, onClick}) => {\n\treturn (<ul><PersonList persons={persons} onClick={onClick}/></ul>);\n}\n\nexport default Persons;\n","import Input from \"./components/Input\";\nimport Message from \"./components/Message\";\nimport netDB from \"./services/netDB\";\nimport Persons from \"./components/Persons\";\nimport React, {useEffect, useState} from \"react\";\nimport \"./style.css\";\n\nconst App = () => {\n\tconst [filter, setFilter] = useState(\"\");\n\tconst [message, setMessage] = useState({text: \"\", error: false});\n\tconst [name, setName] = useState(\"\");\n\tconst [number, setNumber] = useState(\"\");\n\tconst [persons, setPersons] = useState([]);\n\n\tuseEffect(() => {\n\t\tnetDB.reload().then(response => {\n\t\t\tsetPersons(response.data);\n\t\t});\n\t}, []);\n\n\tconst onClickDelete = (id) => {\n\t\tconst found = persons.find(person => person.id === id);\n\t\tif (!window.confirm(`Delete ${found.name}?`)) {\n\t\t\treturn;\n\t\t}\n\t\tnetDB.remove(id).then(response => {\n\t\t\tsetPersons(persons.filter(person => person.id !== id));\n\t\t\tsetMessage({text: `Deleted ${found.name}`, error: false});\n\t\t});\n\t}\n\n\tconst onSubmitPerson = (event) => {\n\t\tevent.preventDefault();\n\n\t\tconst found = persons.find(person =>\n\t\t\tperson.name.toLowerCase() === name.toLowerCase());\n\t\tif (found && found.number === number) {\n\t\t\talert(`${name} already exists`);\n\t\t\t[setName, setNumber].forEach(set => set(\"\"));\n\t\t\treturn;\n\t\t}\n\t\tif (found && window.confirm(`Change ${name}'s number?`)) {\n\n\t\t\treturn; /* TODO backend in exercise 3.17 */\n\n\t\t\tconst copy = {...found, number: number};\n\t\t\tnetDB.update(copy.id, copy).then(response => {\n\t\t\t\tsetPersons(persons.map(person =>\n\t\t\t\t\tperson.id !== copy.id ?\n\t\t\t\t\t\tperson : response.data));\n\t\t\t\tsetMessage({text: `Updated ${name}`, error: false});\n\t\t\t}).catch(error => {\n\t\t\t\tsetMessage({error: true,\n\t\t\t\t\ttext: `${name} does not exist`});\n\t\t\t\tsetPersons(persons.filter(person =>\n\t\t\t\t\tperson.id !== copy.id));\n\t\t\t});\n\t\t\t[setName, setNumber].forEach(set => set(\"\"));\n\t\t\treturn;\n\t\t}\n\n\t\tconst person = {name: name, number: number};\n\t\tnetDB.create(person).then(response => {\n\t\t\tsetPersons(persons.concat(response.data));\n\t\t\tsetMessage({text: `Added ${name}`, error: false});\n\t\t\t[setName, setNumber].forEach(set => set(\"\"));\n\t\t});\n\t}\n\n\tconst shownPersons = !filter.length ? persons : persons.filter(person =>\n\t\tperson.name.toLowerCase().includes(filter.toLowerCase()));\n\n\treturn (\n\t\t<>\n\t\t<h2>Phonebook</h2>\n\t\t<Message message={message} setMessage={setMessage}/>\n\t\t<h4>Filter by Name</h4>\n\t\t<Input label=\"Filter\" value={filter} onChange={setFilter}/>\n\t\t<h4>Add New</h4>\n\t\t<form onSubmit={onSubmitPerson}>\n\t\t\t<Input label=\"Name\" value={name} onChange={setName}/>\n\t\t\t<Input label=\"Number\" value={number} onChange={setNumber}/>\n\t\t\t<button type=\"submit\">Add</button>\n\t\t</form>\n\t\t<h2>Numbers</h2>\n\t\t<Persons persons={shownPersons} onClick={onClickDelete}/>\n\t\t</>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}